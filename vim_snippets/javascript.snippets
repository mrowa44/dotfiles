snippet fun "function"
function ${1:function_name}(${2}) {
	${0:${VISUAL}}
}
endsnippet

snippet switch
switch (${1:expression}) {
	case '${3:case}':
		${4}
		break;
		${0}
	default:
		${2}
}
endsnippet

snippet lg "magic console.log" A
console.log('%c `!v expand("%:t:r")`', 'color: teal; font-weight: bold;', $1);
endsnippet

snippet pg "magic console.log" A
console.log('%c `!v expand("%:t:r")`', 'color: teal; font-weight: bold;', JSON.parse(JSON.stringify($1)));
endsnippet

snippet if "if (condition) { ... }"
if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

# snippet comp "functional component" b
# import React from 'react';
# import {createUseStyles} from 'react-jss';

# const useStyles = createUseStyles((theme) => ({
# }), { name: '$1' });

# interface $1Props {
# }

# export const $1 = (props: $1Props) => {
#   const styles = useStyles();
#   return (
#     <div>
#       dupa
#     </div>
#   );
# }
# endsnippet

snippet comp "functional styled component" b
import * as React from 'react';
import {styled} from '@mui/system';

export interface $1Props {
}

export const $1 = (props: $1Props) => {
  return (
    <div>
      dupa
    </div>
  );
}
endsnippet

snippet story "storybook story" b
import React from 'react';
import {ComponentStory, ComponentMeta} from '@storybook/react';
import {$1} from '@/components/ui/$1';

export default {
  title: 'UI/$1',
  component: $1,
  argTypes: {
  },
  args: {
    children: '$1',
  },
} as ComponentMeta<typeof $1>;

const Template: ComponentStory<typeof $1> = (args) => <$1 {...args} />;

export const Default = Template.bind({});
Default.args = {
};
endsnippet

snippet useState "useState" b
const [$1, set${1/\w+\s*/\u$0/g}] = React.useState(${3:})${0:;}
endsnippet

snippet useEffect "useEffect" b
React.useEffect(() => {
  $1
}, [])${0:;}
endsnippet

snippet iuseBoolean
import { useBoolean } from "@circle-react/hooks/utils/useBoolean";
endsnippet

snippet useBoolean
const [$1, set$1, toggle$1] = useBoolean(false);
endsnippet

snippet useContext "useContext" b
const $0 = React.useContext($1);
endsnippet

snippet <Text "Text component" Ai
<Text>
	$0
</Text>
endsnippet

snippet upmd "up md" Ai
[theme.breakpoints.up("md")]: {
  $0
},
endsnippet

snippet upxl "up xl" Ai
[theme.breakpoints.up("xl")]: {
  $0
},
endsnippet

snippet styled "styled comp" Ai
styled($0)(({theme}) => ({
}));
endsnippet

# snippet "<[A-Za-z"={} ]* class" "react className" rA
# `!p snip.rv = match.group()`Name={styles.$0}
# endsnippet

# snippet "<[A-Za-z"={} ]* class" "react className" rA
# `!p snip.rv = match.group()`Name={}>
# endsnippet

snippet iprop
import PropTypes from 'prop-types';
endsnippet

snippet itext
import Text from 'components/Text';
endsnippet

snippet iclass
import cx from 'classnames';
endsnippet

snippet icx
import cx from 'classnames';
endsnippet

snippet cx
import cx from 'classnames';
endsnippet

snippet iconnect
import { connect } from 'react-redux';
endsnippet

snippet icomp
import { compose } from 'redux';
endsnippet

snippet icompose
import { compose } from 'redux';
endsnippet

snippet navigate
import { navigate } from 'helpers/navigation';
endsnippet

snippet nav
import { navigate } from 'helpers/navigation';
endsnippet

snippet inav 
import { navigate } from 'helpers/navigation';
endsnippet

snippet image
import { imagePath } from 'helpers/assets';
endsnippet

snippet inv
import { InvisibleButton } from 'components/Button';
endsnippet

snippet iamplitude
import * as amplitudeActions from 'actions/amplitude';
endsnippet

snippet iampl?
import * as amplitudeActions from 'actions/amplitude';
endsnippet

snippet iamp
import * as amplitudeActions from 'actions/amplitude';
endsnippet

snippet it
import { ThemeContext } from 'components/Theme';
endsnippet

snippet itheme
import { ThemeContext } from 'components/Theme';
endsnippet

snippet theme
const theme = React.useContext(ThemeContext);
endsnippet





snippet con
export default connect(${1:mapStateToProps})(`!v expand("%:t:r")`);
endsnippet

snippet cdm
componentDidMount() {
	${1}
}
endsnippet

snippet cdup
componentDidUpdate(prevProps, prevState) {
	${1}
}
endsnippet

snippet cwm
componentWillMount() {
	${1}
}
endsnippet

snippet cwr
componentWillReceiveProps(nextProps) {
	${1}
}
endsnippet

snippet cwun
componentWillUnmount() {
	${1}
}
endsnippet

snippet cwu
componentWillUpdate(nextProps, nextState) {
	${1}
}
endsnippet

snippet eslint-disable-default 
/* eslint-disable import/prefer-default-export */
endsnippet

snippet eslint-ignore
/* eslint-disable import/prefer-default-export */
endsnippet

snippet icon "icon import"
import { Icon } from "@circle-react-shared/Icon";
endsnippet

snippet uikit "uikit import"
import { $1 } from "@circle-react-uikit";
endsnippet
